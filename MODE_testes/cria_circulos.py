import numpy as np
from netCDF4 import Dataset
from datetime import datetime, timezone

# Função para calcular a máscara de um círculo
def generate_circle_mask(center_lat, center_lon, radius, lat_grid, lon_grid):
    # Calcular a distância entre cada ponto da grade e o centro do círculo
    x = lon_grid - center_lon
    y = lat_grid - center_lat
    distance = np.sqrt(x**2 + y**2)
    
    # Gerar a máscara, atribuindo valor máximo dentro do círculo e decrescendo conforme a distância
    max_value = 100  # Defina o valor máximo para o centro do círculo
    circle_mask = np.clip(max_value * (1 - (distance / radius)), 0, max_value)
    
    return circle_mask

# Definir o grid do mapa (Argentina)
lat = np.linspace(-60, -20, 400)  # Latitudes entre -60 e -20 graus (aproximadamente a Argentina)
lon = np.linspace(-75, -50, 400)  # Longitudes entre -75 e -50 graus (aproximadamente a Argentina)
lon_grid, lat_grid = np.meshgrid(lon, lat)

# Definir os parâmetros dos 5 círculos
centers = [(-35, -60), (-35, -55), (-40, -58), (-37, -52), (-33, -54)]  # Centros dos círculos
radii = [3, 5, 7, 10, 12]  # Raízes diferentes para os círculos

# Criar a máscara com os 5 círculos
combined_mask = np.zeros_like(lat_grid)

for i in range(len(centers)):
    center_lat, center_lon = centers[i]
    radius = radii[i]
    circle_mask = generate_circle_mask(center_lat, center_lon, radius, lat_grid, lon_grid)
    combined_mask = np.maximum(combined_mask, circle_mask)  # Combinar as máscaras de todos os círculos

# Criar o arquivo NetCDF
with Dataset("obs_circulos.nc", "w", format="NETCDF4") as ncfile:
    # Criar as dimensões
    ncfile.createDimension("lat", lat.size)
    ncfile.createDimension("lon", lon.size)
    ncfile.createDimension("time", None)  # Dimensão de tempo ilimitada

    # Criar as variáveis
    latitudes = ncfile.createVariable("lat", "f4", ("lat",))
    longitudes = ncfile.createVariable("lon", "f4", ("lon",))
    time = ncfile.createVariable("time", "f8", ("time",))  # Variável de tempo
    circle_data = ncfile.createVariable("precipitation_circles", "i2", ("time", "lat", "lon",))

    # Adicionar atributos globais
    ncfile.description = "Mask with multiple circles in Argentina for testing purposes"
    ncfile.source = "Generated by Python script"
    ncfile.history = f"File created on {datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')} (UTC)"

    # Adicionar atributos às variáveis
    latitudes.units = "degrees_north"
    longitudes.units = "degrees_east"
    time.units = "days since 2025-1-28 0:0:0"
    time.calendar = "gregorian"
    circle_data.units = "units (increasing from 1 at the border to max_value at the center)"
    circle_data.description = "Mask with multiple circles in Argentina"

    # Preencher as variáveis
    latitudes[:] = lat
    longitudes[:] = lon
    time[:] = [0.0]  # Primeiro instante de tempo
    circle_data[0, :, :] = combined_mask  # Associar dados ao tempo inicial



# Definir os parâmetros dos 5 círculos
centers = [(-37, -61), (-32, -52), (-40, -56), (-32, -50), (-31, -56)]  # Centros dos círculos
radii = [3, 5, 7, 10, 12]  # Raízes diferentes para os círculos

# Criar a máscara com os 5 círculos
combined_mask = np.zeros_like(lat_grid)

for i in range(len(centers)):
    center_lat, center_lon = centers[i]
    radius = radii[i]
    circle_mask = generate_circle_mask(center_lat, center_lon, radius, lat_grid, lon_grid)
    combined_mask = np.maximum(combined_mask, circle_mask)  # Combinar as máscaras de todos os círculos


# Criar o arquivo NetCDF
with Dataset("fct_circulos.nc", "w", format="NETCDF4") as ncfile:
    # Criar as dimensões
    ncfile.createDimension("lat", lat.size)
    ncfile.createDimension("lon", lon.size)
    ncfile.createDimension("time", None)  # Dimensão de tempo ilimitada

    # Criar as variáveis
    latitudes = ncfile.createVariable("lat", "f4", ("lat",))
    longitudes = ncfile.createVariable("lon", "f4", ("lon",))
    time = ncfile.createVariable("time", "f8", ("time",))  # Variável de tempo
    circle_data = ncfile.createVariable("precipitation_circles", "i2", ("time", "lat", "lon",))

    # Adicionar atributos globais
    ncfile.description = "Mask with multiple circles in Argentina for testing purposes"
    ncfile.source = "Generated by Python script"
    ncfile.history = f"File created on {datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')} (UTC)"

    # Adicionar atributos às variáveis
    latitudes.units = "degrees_north"
    longitudes.units = "degrees_east"
    time.units = "days since 2025-1-28 0:0:0"
    time.calendar = "gregorian"
    circle_data.units = "units (increasing from 1 at the border to max_value at the center)"
    circle_data.description = "Mask with multiple circles in Argentina"

    # Preencher as variáveis
    latitudes[:] = lat
    longitudes[:] = lon
    time[:] = [0.0]  # Primeiro instante de tempo
    circle_data[0, :, :] = combined_mask  # Associar dados ao tempo inicial