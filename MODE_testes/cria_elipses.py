import numpy as np
from netCDF4 import Dataset
import matplotlib.pyplot as plt
from datetime import datetime, timezone

# Definir os parâmetros da elipse de previsão

center_lat = -15  # Latitude do centro da elipse
center_lon = -40  # Longitude do centro da elipse
semi_major_axis = 10  # Eixo maior em graus
semi_minor_axis = 5   # Eixo menor em graus
rotation_angle = 90   # Ângulo de rotação da elipse em graus

# Definir o grid do mapa (Brasil)
lat = np.linspace(-35, 5, 400)  # Latitudes entre -35 e 5 graus
lon = np.linspace(-75, -30, 400)  # Longitudes entre -75 e -30 graus
lon_grid, lat_grid = np.meshgrid(lon, lat)

# Converter ângulo de rotação para radianos
theta = np.radians(rotation_angle)

# Calcular os pontos da elipse no grid
x = lon_grid - center_lon
y = lat_grid - center_lat

# Aplicar a rotação
x_rot = x * np.cos(theta) + y * np.sin(theta)
y_rot = -x * np.sin(theta) + y * np.cos(theta)

# Máscara da elipse
ellipse_mask = ((x_rot / semi_major_axis) ** 2 + (y_rot / semi_minor_axis) ** 2) <= 1

# Criar o arquivo NetCDF
with Dataset("fct_elipse.nc", "w", format="NETCDF4") as ncfile:
    # Criar as dimensões
    ncfile.createDimension("lat", lat.size)
    ncfile.createDimension("lon", lon.size)
    ncfile.createDimension("time", None)  # Dimensão de tempo ilimitada

    # Criar as variáveis
    latitudes = ncfile.createVariable("lat", "f4", ("lat",))
    longitudes = ncfile.createVariable("lon", "f4", ("lon",))
    time = ncfile.createVariable("time", "f8", ("time",))  # Variável de tempo
    ellipse_data = ncfile.createVariable("precipitation_ellipse", "i1", ("time", "lat", "lon",))

    # Adicionar atributos globais
    ncfile.description = "10-day precipitation ellipse mask for testing purposes"
    ncfile.source = "Generated by Python script"
    ncfile.history = f"File created on {datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')} (UTC)"

    # Adicionar atributos às variáveis
    latitudes.units = "degrees_north"
    longitudes.units = "degrees_east"
    time.units = "days since 2025-1-28 0:0:0"

    time.calendar = "gregorian"
    ellipse_data.units = "binary (1=inside, 0=outside)"
    ellipse_data.description = "Binary mask representing an elliptical area of precipitation"

    # Preencher as variáveis
    latitudes[:] = lat
    longitudes[:] = lon
    time[:] = [0.0]  # Primeiro instante de tempo
    ellipse_data[0, :, :] = ellipse_mask.astype(int)  # Associar dados ao tempo inicial

# Definir os parâmetros da elipse de observação
center_lat = -15  # Latitude do centro da elipse
center_lon = -55  # Longitude do centro da elipse
semi_major_axis = 10  # Eixo maior em graus
semi_minor_axis = 5   # Eixo menor em graus
rotation_angle = 90   # Ângulo de rotação da elipse em graus

# Definir o grid do mapa (Brasil)
lat = np.linspace(-35, 5, 400)  # Latitudes entre -35 e 5 graus
lon = np.linspace(-75, -30, 400)  # Longitudes entre -75 e -30 graus
lon_grid, lat_grid = np.meshgrid(lon, lat)

# Converter ângulo de rotação para radianos
theta = np.radians(rotation_angle)

# Calcular os pontos da elipse no grid
x = lon_grid - center_lon
y = lat_grid - center_lat

# Aplicar a rotação
x_rot = x * np.cos(theta) + y * np.sin(theta)
y_rot = -x * np.sin(theta) + y * np.cos(theta)

# Máscara da elipse
ellipse_mask = ((x_rot / semi_major_axis) ** 2 + (y_rot / semi_minor_axis) ** 2) <= 1

from datetime import datetime, timezone

# Criar o arquivo NetCDF
with Dataset("obs_elipse.nc", "w", format="NETCDF4") as ncfile:
    # Criar as dimensões
    ncfile.createDimension("lat", lat.size)
    ncfile.createDimension("lon", lon.size)
    ncfile.createDimension("time", None)  # Dimensão de tempo ilimitada

    # Criar as variáveis
    latitudes = ncfile.createVariable("lat", "f4", ("lat",))
    longitudes = ncfile.createVariable("lon", "f4", ("lon",))
    time = ncfile.createVariable("time", "f8", ("time",))  # Variável de tempo
    ellipse_data = ncfile.createVariable("precipitation_ellipse", "i1", ("time", "lat", "lon",))

    # Adicionar atributos globais
    ncfile.description = "10-day precipitation ellipse mask for testing purposes"
    ncfile.source = "Generated by Python script"
    ncfile.history = f"File created on {datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')} (UTC)"

    # Adicionar atributos às variáveis
    latitudes.units = "degrees_north"
    longitudes.units = "degrees_east"
    time.units = "days since 2025-1-28 0:0:0"

    time.calendar = "gregorian"
    ellipse_data.units = "binary (1=inside, 0=outside)"
    ellipse_data.description = "Binary mask representing an elliptical area of precipitation"

    # Preencher as variáveis
    latitudes[:] = lat
    longitudes[:] = lon
    time[:] = [0.0]  # Primeiro instante de tempo
    ellipse_data[0, :, :] = ellipse_mask.astype(int)  # Associar dados ao tempo inicial